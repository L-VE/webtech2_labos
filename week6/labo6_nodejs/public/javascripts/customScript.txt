// TODO
// * css animation op de messages
// * voting systeem
// * bij meermaals klikken = voten, moet de vraag groter worden
// DAT IS DAN OPNIEUW SUBSCRIBER EN PUBLISHEN NAAR EEN ANDER PATH
// DAN WORDT ER BIJ DE PUBLISH MEEGEGEVEN WELK ELEMENT GROTER MOET WORDEN
//

var previousChatTime = new Date();
var messageId = 0;

$(document).ready(function(){

/*	var client = new Faye.Client('http://localhost:3000/faye',{
				timeout: 20
	});*/
    
    
    var text_max = 100;
    $('.charactersLeft').html(text_max + ' characters remaining');

    $('#questionField').keyup(function() {
        var text_length = $('#questionField').val().length;
        var text_remaining = text_max - text_length;

        $('.charactersLeft').html(text_remaining + ' characters remaining');
    });

	var client = new Faye.Client('http://localhost:3000/faye/',{
				timeout: 20
	});

//	Clients should subscribe to channels using the #subscribe() method:		
	var subscriptionAsk = client.subscribe('/ask', function(message) {
	   //alert('Got a message: ' + message.text);
        var currentDateTime = new Date();
        var currentdate = createDateStringOnlyTime(currentDateTime);

        
    /*    if(previousChatTime.getHours() > currentDateTime.getHours())
        {
            $( "#leftSide .chatTime" ).each( function( index, element ){
                console.log($(this).html(createDateString($(this).html())));
            });
 
        }
*/ // HIER NOG EEN BETERE MANIER VOOR VINDEN? GEFORMATEERDE MSS 
     var appendToLeftSide = "<p id='message" + messageId
                             + "' class='questionStyle animateQuestion'><span class='userClass'>" 
                             + capitaliseFirstLetter(message.user)
                             + " asks: </span></br><span class='chatMessage'>" 
                             + message.chat 
                             + "</span><span class='chatTime'>" 
                             + currentdate
                             + "</span></p>";



        messageId++;
        previousChatTime = currentDateTime;

        
       console.log(currentDateTime);
        $("#leftSide").append(appendToLeftSide);
	
    }); // END VAN SUBSCRIBE AKS

// hier eruit halen welk element een vote gekregen heeft    
/*    var subscriptionAllQuestions = client.subscribe('/allQuestions', function(message) {

        console.log(message.vote);
    });*/

  /*  $(window).resize(function() {
      var windowHeigth = $(window).height();
      if(windowHeigth <= 665)
      {
            $("#leftSide").css("height",(windowHeigth/2) - 20);
      }
    });*/

// TODO -- TODO
    // MAX 100 KARAKTERS
    // HET RESTEREND AANTAL KARAKTERS LATEN ZIEN
//	The Subscription object is a promise that is fulfilled when the subscription has been acknowledged by the server
	/*subscriptionAsk.then(function() {
	  alert('Subscription is now active!');
	});*/
	
    $('#submitQuestion').on('click',null, function() {
    	var chatMessage = $('#questionField').val();
    	var chatUser = $('#nameField').val();
    		/*var url = 'http://localhost:3000/message';
				
    		var message = {message: 'Client 1: ' + chat.val()};
    		var dataType = 'json';
    		$.ajax({
    		        type: 'POST',
    		        url: url,
    		        data: message,
    		        dataType: dataType,
    		    });
    		  chat.val('');*/

    	//client.publish("/message", chat);
//	You can send a message using the #publish() method, passing in the channel name and a message object.
    	//var publication = client.publish('/ask', {text: chat});
    	if(chatMessage != "" && chatUser != "" )
    	{
    		$(".errorMessage").text("") ;
    		$(".errorMessage").css('display','none');
			var publicationAsk = client.publish('/ask', {chat : chatMessage, user : chatUser});
    	}
    	else
    	{
    		$(".errorMessage").text("You must fill in both your name and a question!") ;
    		$(".errorMessage").css('display','block');
    	}
    	
// ust like subscribe(), the publish() method returns a promise that is fulfilled when the server
// acknowledges the message. This just means the server received and routed the message successfully, 
// not that it has been received by all other clients. The promise is rejected if the server explcitly 
// returns an error saying it could not publish the message to other clients; network errors are therefore 
// not covered by this API.
 /*   	publicationAsk.then(function() {
			  alert('Message received by server!');
			}, function(error) {
			  alert('There was a problem: ' + error.message);
		});
*/

    	
	}); // END VAN ONCLICK SUBMITQUESTION

    $("#content #leftSide p").on('click', function() {
        //console.log($(this));
        alert("test");
    });// END VAN ONCLICK QUESTIONSTYLE


	/*var nameField = $("#nameField");

    		    $('#submitQuestion').on('click',null, function() {
    		        var url = 'http://localhost:3000/';
				
    		        var message = {message: 'Client 1: ' + nameField.val()};
    		        var dataType = 'json';
    		        $.ajax({
    		            type: 'POST',
    		            url: url,
    		            data: message,
    		            dataType: dataType,
    		        });
    		        nameField.val('');
    		    });*/

});// END VAN DOCUMENT READY

function createDateString(currentdate)
{
    var currentDay = checkDate(currentdate.getDate());
    var currentMonth = checkDate(currentdate.getMonth()+1);
    var currentYear = checkDate(currentdate.getFullYear());
    var currentHour = checkDate(currentdate.getHours());
    var currentMinutes = checkDate(currentdate.getMinutes());    
    var currentSecond = checkDate(currentdate.getSeconds());  

    var currentDateTime = currentDay + "/"
                    + currentMonth + "/" 
                    + currentYear + " ( "  
                    + currentHour + ":"  
                    + currentMinutes + ":" 
                    + currentSecond + " ) " ;
    return currentDateTime;
}

function createDateStringOnlyTime(currentdate)
{
   
    var currentHour = checkDate(currentdate.getHours());
    var currentMinutes = checkDate(currentdate.getMinutes());    
    var currentSecond = checkDate(currentdate.getSeconds());  

    var currentDateTime = currentHour + ":"  
                    + currentMinutes + ":" 
                    + currentSecond;
    return currentDateTime;
}


function checkDate(p_dateElement)
{
    if(p_dateElement < 10)
        p_dateElement = "0" + p_dateElement;
    return p_dateElement;
}

function capitaliseFirstLetter(string)
{
    return string.charAt(0).toUpperCase() + string.slice(1);
}

